# This Jinja2 template generates SQLAlchemy and Pydantic model classes #
from sqlalchemy import Column, Integer, String, DateTime, ForeignKey, Text, Sequence, Table
from sqlalchemy.orm import relationship
from sqlalchemy.orm import declarative_base
from pydantic import BaseModel
from typing import Optional, List
from datetime import datetime

{% if association_tables|length > 0 %}
# Association Tables
{% for table in association_tables -%}
{{ table.table_name }} = Table(
    {{ table.table_name }}, 
    Base.metadata,
    {% for column in table.columns -%}
    Column('{{ column.name }}', {{ column.type }}, ForeignKey('{{ column.foreign_key }}'), primary_key=True),
    {% endfor -%}
)
{% endfor -%}
{% endif %}

# SQLAlchemy Model
class {{ model_name }}(Base):
    __tablename__ = "{{ table_name }}"
{% for field in fields %}
    {%- if field.name == "id" %}
    # Sequence required by DuckDB, due to its lack of support for `SERIAL` used by SQLAlchemy for auto-increment
    {{ table_name }}_id_seq = Sequence("{{ table_name }}_id_seq")
    id = Column(
        Integer,
        {{ table_name }}_id_seq,
        server_default={{ table_name }}_id_seq.next_value(),
        primary_key=True,
    )
    {%- else %}
    {{ field.name }} = Column({{ field.type }}, primary_key={{ field.primary_key }}, index={{ field.index }}, nullable={{ field.nullable }})
    {%- endif %}
    {%- if field.foreign_key %}
    , ForeignKey('{{ field.foreign_key }}')
    {%- endif %}
{%- endfor %}
{% if (relationships|length) > 0 %}
    # Relationships
{% for relation in relationships %}
    {{ relation.model|lower }}s = relationship("{{ relation.model }}",
    {%- if relation.secondary -%}
    secondary="{{ relation.secondary }}",
    {%- endif -%}
    back_populates="{{ relation.back_populates }}")
{% endfor %}
{%- endif -%}

# Pydantic Models
class {{ model_name }}Base(BaseModel):
{%- for field in fields %}
    {%- if not field.primary_key %}
    {{ field.name }}: Optional[{{ field.pydantic_type }}] = None
    {%- endif %}
{%- endfor %}


class {{ model_name }}Create({{ model_name }}Base):
    pass


class {{ model_name }}DB({{ model_name }}Base):
{%- for field in fields %}
    {%- if field.primary_key %}
    {{ field.name }}: {{ field.pydantic_type }}
    {%- endif %}
{%- endfor %}
{% if (relationships|length) > 0 %}
    # Relationships
    {% for relation in relationships -%}
    from .{{ relation.model|lower }} import {{ relation.model }}DB
    {{ relation.model|lower }}s: List[{{ relation.model }}DB]
    {% endfor -%}
{%- endif %}
    class Config:
        from_attributes = True
